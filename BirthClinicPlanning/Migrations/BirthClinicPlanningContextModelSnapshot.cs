// <auto-generated />
using System;
using BirthClinicPlanning.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BirthClinicPlanning.Migrations
{
    [DbContext(typeof(BirthClinicPlanningContext))]
    partial class BirthClinicPlanningContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BirthClinicPlanning.Birth", b =>
                {
                    b.Property<int>("BirthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BirthId");

                    b.ToTable("Births");
                });

            modelBuilder.Entity("BirthClinicPlanning.Child", b =>
                {
                    b.Property<int>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BirthId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CprNumber")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChildId");

                    b.HasIndex("BirthId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("BirthClinicPlanning.Clinicians", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BirthRoomId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Clinicians");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Relatives", b =>
                {
                    b.Property<int>("RelativesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestRoomId")
                        .HasColumnType("int");

                    b.HasKey("RelativesId");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.RelativesChild", b =>
                {
                    b.Property<int>("RelativesChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int>("RelativesId")
                        .HasColumnType("int");

                    b.HasKey("RelativesChildId");

                    b.HasIndex("RelativesId");

                    b.ToTable("RelativesChild");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RelativesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("RelativesId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            ReservationId = 2,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 2
                        },
                        new
                        {
                            ReservationId = 3,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 3
                        },
                        new
                        {
                            ReservationId = 4,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 4
                        },
                        new
                        {
                            ReservationId = 5,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 5
                        },
                        new
                        {
                            ReservationId = 6,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 6
                        },
                        new
                        {
                            ReservationId = 7,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 7
                        },
                        new
                        {
                            ReservationId = 8,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 8
                        },
                        new
                        {
                            ReservationId = 9,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 9
                        },
                        new
                        {
                            ReservationId = 10,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 10
                        },
                        new
                        {
                            ReservationId = 11,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 11
                        },
                        new
                        {
                            ReservationId = 12,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 12
                        },
                        new
                        {
                            ReservationId = 13,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 13
                        },
                        new
                        {
                            ReservationId = 14,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 14
                        },
                        new
                        {
                            ReservationId = 15,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 15
                        },
                        new
                        {
                            ReservationId = 16,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 16
                        },
                        new
                        {
                            ReservationId = 17,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 17
                        },
                        new
                        {
                            ReservationId = 18,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 18
                        },
                        new
                        {
                            ReservationId = 19,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 19
                        },
                        new
                        {
                            ReservationId = 20,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 20
                        },
                        new
                        {
                            ReservationId = 21,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 21
                        },
                        new
                        {
                            ReservationId = 22,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 22
                        },
                        new
                        {
                            ReservationId = 23,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 23
                        },
                        new
                        {
                            ReservationId = 24,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 24
                        },
                        new
                        {
                            ReservationId = 25,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 25
                        },
                        new
                        {
                            ReservationId = 26,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 26
                        },
                        new
                        {
                            ReservationId = 27,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 27
                        },
                        new
                        {
                            ReservationId = 28,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 28
                        },
                        new
                        {
                            ReservationId = 29,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 29
                        },
                        new
                        {
                            ReservationId = 30,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 30
                        },
                        new
                        {
                            ReservationId = 31,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 31
                        },
                        new
                        {
                            ReservationId = 32,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 32
                        },
                        new
                        {
                            ReservationId = 33,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 33
                        },
                        new
                        {
                            ReservationId = 34,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 34
                        },
                        new
                        {
                            ReservationId = 35,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 35
                        },
                        new
                        {
                            ReservationId = 36,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 36
                        },
                        new
                        {
                            ReservationId = 37,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 37
                        },
                        new
                        {
                            ReservationId = 38,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 38
                        },
                        new
                        {
                            ReservationId = 39,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 39
                        },
                        new
                        {
                            ReservationId = 40,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 40
                        },
                        new
                        {
                            ReservationId = 41,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 41
                        },
                        new
                        {
                            ReservationId = 42,
                            ReservationEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 42
                        });
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Room", b =>
                {
                    b.Property<int>("RoomNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoomType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomNumber");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Secretaries", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Secretaries");

                    b.HasData(
                        new
                        {
                            EmployeeId = 56,
                            FullName = "Simba Kongesøn",
                            Title = "Secretary"
                        },
                        new
                        {
                            EmployeeId = 57,
                            FullName = "Signe Mikkelsen",
                            Title = "Secretary"
                        },
                        new
                        {
                            EmployeeId = 58,
                            FullName = "Sune Orlater",
                            Title = "Secretary"
                        },
                        new
                        {
                            EmployeeId = 59,
                            FullName = "Søren Krag",
                            Title = "Secretary"
                        });
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Works", b =>
                {
                    b.Property<int>("WorksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BirthId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("WorksId");

                    b.HasIndex("BirthId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("BirthClinicPlanning.Doctors", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Clinicians");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("BirthClinicPlanning.Midwifes", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Clinicians");

                    b.ToTable("Midwifes");

                    b.HasData(
                        new
                        {
                            EmployeeId = 46,
                            BirthRoomId = 0,
                            FullName = "Malfoy Draco",
                            Position = "Midwife",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 47,
                            BirthRoomId = 0,
                            FullName = "Mille Madsen",
                            Position = "Midwife",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 48,
                            BirthRoomId = 0,
                            FullName = "Mads Madsen",
                            Position = "Midwife",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 49,
                            BirthRoomId = 0,
                            FullName = "Marie Toft",
                            Position = "Midwife",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 50,
                            BirthRoomId = 0,
                            FullName = "Malene Sørensen",
                            Position = "Midwife",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 51,
                            BirthRoomId = 0,
                            FullName = "Morten Mortensen",
                            Position = "Midwife",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 52,
                            BirthRoomId = 0,
                            FullName = "Martin Frederiksen",
                            Position = "Midwife",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 53,
                            BirthRoomId = 0,
                            FullName = "Marcus Nielsen",
                            Position = "Midwife",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 54,
                            BirthRoomId = 0,
                            FullName = "Maja Mikkelsen",
                            Position = "Midwife",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 55,
                            BirthRoomId = 0,
                            FullName = "Maria Loft Nielsen",
                            Position = "Midwife",
                            Title = "Clinician"
                        });
                });

            modelBuilder.Entity("BirthClinicPlanning.Nurses", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Clinicians");

                    b.ToTable("Nurses");

                    b.HasData(
                        new
                        {
                            EmployeeId = 26,
                            BirthRoomId = 0,
                            FullName = "Niels Nielsen",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 27,
                            BirthRoomId = 0,
                            FullName = "Nikolaj Nikolajsen",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 28,
                            BirthRoomId = 0,
                            FullName = "Niklas Landin",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 29,
                            BirthRoomId = 0,
                            FullName = "Natasha Romanoff",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 30,
                            BirthRoomId = 0,
                            FullName = "Natalia Alianovna Romanova",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 31,
                            BirthRoomId = 0,
                            FullName = "Nicki Sørensen",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 32,
                            BirthRoomId = 0,
                            FullName = "Niller Nielsen",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 33,
                            BirthRoomId = 0,
                            FullName = "Noah Overbyen",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 34,
                            BirthRoomId = 0,
                            FullName = "Nik Petersen",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 35,
                            BirthRoomId = 0,
                            FullName = "Nora Andersen",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 36,
                            BirthRoomId = 0,
                            FullName = "Nadai Jensen",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 37,
                            BirthRoomId = 0,
                            FullName = "Nikita Mortensen Bækgaard",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 38,
                            BirthRoomId = 0,
                            FullName = "Nanna Louise Johansen",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 39,
                            BirthRoomId = 0,
                            FullName = "Nelly Winston",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 40,
                            BirthRoomId = 0,
                            FullName = "Naja Madsen",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 41,
                            BirthRoomId = 0,
                            FullName = "Neville Longbottom",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 42,
                            BirthRoomId = 0,
                            FullName = "Norbit Albertrise",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 43,
                            BirthRoomId = 0,
                            FullName = "No Name",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 44,
                            BirthRoomId = 0,
                            FullName = "Nairobi Kenya",
                            Position = "Nurse",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 45,
                            BirthRoomId = 0,
                            FullName = "Norge Nordmand",
                            Position = "Nurse",
                            Title = "Clinician"
                        });
                });

            modelBuilder.Entity("BirthClinicPlanning.Sosu", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Clinicians");

                    b.ToTable("Sosu");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            BirthRoomId = 0,
                            FullName = "Sofie Jensen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 2,
                            BirthRoomId = 0,
                            FullName = "Søren Larsen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 3,
                            BirthRoomId = 0,
                            FullName = "Sarah Hansen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 4,
                            BirthRoomId = 0,
                            FullName = "Susanne Himmelblå",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 5,
                            BirthRoomId = 0,
                            FullName = "Simon Bjermand Kjær",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 6,
                            BirthRoomId = 0,
                            FullName = "Simon Schou Jensen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 7,
                            BirthRoomId = 0,
                            FullName = "Selma Jakobsen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 8,
                            BirthRoomId = 0,
                            FullName = "Susan Kristensen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 9,
                            BirthRoomId = 0,
                            FullName = "Stine Olsen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 10,
                            BirthRoomId = 0,
                            FullName = "Sandra Toft",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 11,
                            BirthRoomId = 0,
                            FullName = "Silke Rasmusen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 12,
                            BirthRoomId = 0,
                            FullName = "Siff Andersen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 13,
                            BirthRoomId = 0,
                            FullName = "Sophie Loft",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 14,
                            BirthRoomId = 0,
                            FullName = "Sol-Solvej Solskin",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 15,
                            BirthRoomId = 0,
                            FullName = "Simone Kjær",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 16,
                            BirthRoomId = 0,
                            FullName = "Sabrina Møller Andersen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 17,
                            BirthRoomId = 0,
                            FullName = "Sara Christensen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 18,
                            BirthRoomId = 0,
                            FullName = "Sascha Madsen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 19,
                            BirthRoomId = 0,
                            FullName = "Sidsel Lund Sørensen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 20,
                            BirthRoomId = 0,
                            FullName = "Sten Steensen",
                            Position = "Sosu",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 21,
                            BirthRoomId = 0,
                            FullName = "Danny Boy",
                            Position = "Doctor",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 22,
                            BirthRoomId = 0,
                            FullName = "Dirk Passer",
                            Position = "Doctor",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 23,
                            BirthRoomId = 0,
                            FullName = "David Davidson",
                            Position = "Doctor",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 24,
                            BirthRoomId = 0,
                            FullName = "Diana Jensen",
                            Position = "Doctor",
                            Title = "Clinician"
                        },
                        new
                        {
                            EmployeeId = 25,
                            BirthRoomId = 0,
                            FullName = "Daniel Danielsen",
                            Position = "Doctor",
                            Title = "Clinician"
                        });
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Family", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.Relatives");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Father", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.Relatives");

                    b.Property<string>("CPRNumber")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Fathers");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Mother", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.Relatives");

                    b.Property<string>("CPRNumber")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Mothers");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.BirthRoom", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.Room");

                    b.ToTable("BirthRooms");

                    b.HasData(
                        new
                        {
                            RoomNumber = 28,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 29,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 30,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 31,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 32,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 33,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 34,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 35,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 36,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 37,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 38,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 39,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 40,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 41,
                            RoomType = "BirthRoom"
                        },
                        new
                        {
                            RoomNumber = 42,
                            RoomType = "BirthRoom"
                        });
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.RestRoom", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.Room");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RestRooms");
                });

            modelBuilder.Entity("BirthClinicPlanning.MaternityRoom", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.RestRoom");

                    b.ToTable("MaternityRooms");

                    b.HasData(
                        new
                        {
                            RoomNumber = 1,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 2,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 3,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 4,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 5,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 6,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 7,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 8,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 9,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 10,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 11,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 12,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 13,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 14,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 15,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 16,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 17,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 18,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 19,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 20,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 21,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 22,
                            RoomType = "Restroom",
                            Type = "MaternityRoom"
                        },
                        new
                        {
                            RoomNumber = 23,
                            RoomType = "Restroom",
                            Type = "RestRoom4Hours"
                        },
                        new
                        {
                            RoomNumber = 24,
                            RoomType = "Restroom",
                            Type = "RestRoom4Hours"
                        },
                        new
                        {
                            RoomNumber = 25,
                            RoomType = "Restroom",
                            Type = "RestRoom4Hours"
                        },
                        new
                        {
                            RoomNumber = 26,
                            RoomType = "Restroom",
                            Type = "RestRoom4Hours"
                        },
                        new
                        {
                            RoomNumber = 27,
                            RoomType = "Restroom",
                            Type = "RestRoom4Hours"
                        });
                });

            modelBuilder.Entity("BirthClinicPlanning.RestRoom4Hours", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.RestRoom");

                    b.ToTable("RestRoom4Hours");
                });

            modelBuilder.Entity("BirthClinicPlanning.Child", b =>
                {
                    b.HasOne("BirthClinicPlanning.Birth", "Birth")
                        .WithMany("ChildList")
                        .HasForeignKey("BirthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Birth");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.RelativesChild", b =>
                {
                    b.HasOne("BirthClinicPlanning.Child", "Child")
                        .WithMany("RelativesChild")
                        .HasForeignKey("RelativesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthClinicPlanning.Models.Relatives", "Relatives")
                        .WithMany("RelativesChildList")
                        .HasForeignKey("RelativesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Relatives");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Reservation", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Relatives", "Relatives")
                        .WithMany("ReservationList")
                        .HasForeignKey("RelativesId");

                    b.HasOne("BirthClinicPlanning.Models.Room", "Room")
                        .WithMany("ReservationList")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relatives");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Works", b =>
                {
                    b.HasOne("BirthClinicPlanning.Birth", "Birth")
                        .WithMany("WorksList")
                        .HasForeignKey("BirthId");

                    b.HasOne("BirthClinicPlanning.Clinicians", "Clinicians")
                        .WithMany("WorksList")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Birth");

                    b.Navigation("Clinicians");
                });

            modelBuilder.Entity("BirthClinicPlanning.Doctors", b =>
                {
                    b.HasOne("BirthClinicPlanning.Clinicians", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Doctors", "EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Midwifes", b =>
                {
                    b.HasOne("BirthClinicPlanning.Clinicians", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Midwifes", "EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Nurses", b =>
                {
                    b.HasOne("BirthClinicPlanning.Clinicians", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Nurses", "EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Sosu", b =>
                {
                    b.HasOne("BirthClinicPlanning.Clinicians", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Sosu", "EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Family", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Relatives", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Models.Family", "RelativesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Father", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Relatives", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Models.Father", "RelativesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Mother", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Relatives", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Models.Mother", "RelativesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.BirthRoom", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Room", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Models.BirthRoom", "RoomNumber")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.RestRoom", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Room", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Models.RestRoom", "RoomNumber")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.MaternityRoom", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.RestRoom", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.MaternityRoom", "RoomNumber")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.RestRoom4Hours", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.RestRoom", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.RestRoom4Hours", "RoomNumber")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Birth", b =>
                {
                    b.Navigation("ChildList");

                    b.Navigation("WorksList");
                });

            modelBuilder.Entity("BirthClinicPlanning.Child", b =>
                {
                    b.Navigation("RelativesChild");
                });

            modelBuilder.Entity("BirthClinicPlanning.Clinicians", b =>
                {
                    b.Navigation("WorksList");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Relatives", b =>
                {
                    b.Navigation("RelativesChildList");

                    b.Navigation("ReservationList");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Room", b =>
                {
                    b.Navigation("ReservationList");
                });
#pragma warning restore 612, 618
        }
    }
}
