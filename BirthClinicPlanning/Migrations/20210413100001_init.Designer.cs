// <auto-generated />
using System;
using BirthClinicPlanning.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BirthClinicPlanning.Migrations
{
    [DbContext(typeof(BirthClinicPlanningContext))]
    [Migration("20210413100001_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BirthClinicPlanning.Birth", b =>
                {
                    b.Property<int>("BirthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BirthId");

                    b.ToTable("Births");
                });

            modelBuilder.Entity("BirthClinicPlanning.Child", b =>
                {
                    b.Property<int>("CprNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BirthId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CprNumber");

                    b.HasIndex("BirthId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("BirthClinicPlanning.Clinicians", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BirthRoomId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Clinicians");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Relatives", b =>
                {
                    b.Property<int>("RelativesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestRoomId")
                        .HasColumnType("int");

                    b.HasKey("RelativesId");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.RelativesChild", b =>
                {
                    b.Property<int>("RelativesChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CprNumber")
                        .HasColumnType("int");

                    b.Property<int>("RelativesId")
                        .HasColumnType("int");

                    b.HasKey("RelativesChildId");

                    b.HasIndex("RelativesId");

                    b.ToTable("RelativesChild");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RelativesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("RelativesId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Room", b =>
                {
                    b.Property<int>("RoomNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoomType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomNumber");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Secretaries", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Secretaries");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Works", b =>
                {
                    b.Property<int>("WorksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BirthId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("WorksId");

                    b.HasIndex("BirthId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("BirthClinicPlanning.Doctors", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Clinicians");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("BirthClinicPlanning.Midwifes", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Clinicians");

                    b.ToTable("Midwifes");
                });

            modelBuilder.Entity("BirthClinicPlanning.Nurses", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Clinicians");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("BirthClinicPlanning.Sosu", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Clinicians");

                    b.ToTable("Sosu");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Family", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.Relatives");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Father", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.Relatives");

                    b.Property<string>("CPRNumber")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Fathers");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Mother", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.Relatives");

                    b.Property<string>("CPRNumber")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Mothers");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.BirthRoom", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.Room");

                    b.Property<int>("BirthId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.ToTable("BirthRooms");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.RestRoom", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.Room");

                    b.Property<DateTime>("OccupiedEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OccupiedStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RestRooms");
                });

            modelBuilder.Entity("BirthClinicPlanning.MaternityRoom", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.RestRoom");

                    b.ToTable("MaternityRooms");
                });

            modelBuilder.Entity("BirthClinicPlanning.RestRoom4Hours", b =>
                {
                    b.HasBaseType("BirthClinicPlanning.Models.RestRoom");

                    b.ToTable("RestRoom4Hours");
                });

            modelBuilder.Entity("BirthClinicPlanning.Child", b =>
                {
                    b.HasOne("BirthClinicPlanning.Birth", "Birth")
                        .WithMany("ChildList")
                        .HasForeignKey("BirthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Birth");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.RelativesChild", b =>
                {
                    b.HasOne("BirthClinicPlanning.Child", "Child")
                        .WithMany("RelativesChild")
                        .HasForeignKey("RelativesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthClinicPlanning.Models.Relatives", "Relatives")
                        .WithMany("RelativesChildList")
                        .HasForeignKey("RelativesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Relatives");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Reservation", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Relatives", "Relatives")
                        .WithMany("ReservationList")
                        .HasForeignKey("RelativesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthClinicPlanning.Models.Room", "Room")
                        .WithMany("ReservationList")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relatives");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Works", b =>
                {
                    b.HasOne("BirthClinicPlanning.Birth", "Birth")
                        .WithMany("WorksList")
                        .HasForeignKey("BirthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthClinicPlanning.Clinicians", "Clinicians")
                        .WithMany("WorksList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Birth");

                    b.Navigation("Clinicians");
                });

            modelBuilder.Entity("BirthClinicPlanning.Doctors", b =>
                {
                    b.HasOne("BirthClinicPlanning.Clinicians", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Doctors", "EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Midwifes", b =>
                {
                    b.HasOne("BirthClinicPlanning.Clinicians", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Midwifes", "EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Nurses", b =>
                {
                    b.HasOne("BirthClinicPlanning.Clinicians", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Nurses", "EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Sosu", b =>
                {
                    b.HasOne("BirthClinicPlanning.Clinicians", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Sosu", "EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Family", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Relatives", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Models.Family", "RelativesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Father", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Relatives", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Models.Father", "RelativesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Mother", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Relatives", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Models.Mother", "RelativesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.BirthRoom", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Room", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Models.BirthRoom", "RoomNumber")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.RestRoom", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.Room", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.Models.RestRoom", "RoomNumber")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.MaternityRoom", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.RestRoom", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.MaternityRoom", "RoomNumber")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.RestRoom4Hours", b =>
                {
                    b.HasOne("BirthClinicPlanning.Models.RestRoom", null)
                        .WithOne()
                        .HasForeignKey("BirthClinicPlanning.RestRoom4Hours", "RoomNumber")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirthClinicPlanning.Birth", b =>
                {
                    b.Navigation("ChildList");

                    b.Navigation("WorksList");
                });

            modelBuilder.Entity("BirthClinicPlanning.Child", b =>
                {
                    b.Navigation("RelativesChild");
                });

            modelBuilder.Entity("BirthClinicPlanning.Clinicians", b =>
                {
                    b.Navigation("WorksList");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Relatives", b =>
                {
                    b.Navigation("RelativesChildList");

                    b.Navigation("ReservationList");
                });

            modelBuilder.Entity("BirthClinicPlanning.Models.Room", b =>
                {
                    b.Navigation("ReservationList");
                });
#pragma warning restore 612, 618
        }
    }
}
